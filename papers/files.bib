
@incollection{stiller_autonomic_2010,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {An {Autonomic} {Testing} {Framework} for {IPv6} {Configuration} {Protocols}},
	volume = {6155},
	isbn = {978-3-642-13985-7},
	url = {://WOS:000282458300007},
	abstract = {The current underutilization of IPv6 enabled services makes accesses to them very attractive because of higher availability and better response time, like the IPv6 specific services from Google and Youtube have recently got a lot of requests. In this paper, we describe a fuzzing framework for IPv6 protocols. Fuzzing is a process by which faults are injected in order to find vulnerabilities in implementations. Our paper describes a machine learning approach, that leverages reinforcement based fuzzing method. We describe a reinforcement learning algorithm to allow the framework to autonomically learn the best fuzzing mechanisms and to automatically test stability and reliability of IPv6.},
	booktitle = {Mechanisms for {Autonomous} {Management} of {Networks} and {Services}},
	author = {Becker, Sheila and Abdelnur, Humberto and State, Radu and Engel, Thomas},
	editor = {Stiller, B. and DeTruck, F.},
	year = {2010},
	keywords = {已读},
	pages = {65--+},
	file = {Becker et al_2010_An Autonomic Testing Framework for IPv6 Configuration Protocols.pdf:files/169/Becker et al_2010_An Autonomic Testing Framework for IPv6 Configuration Protocols.pdf:application/pdf}
}

@inproceedings{karamcheti_adaptive_2018,
	title = {Adaptive {Grey}-{Box} {Fuzz}-{Testing} with {Thompson} {Sampling}},
	isbn = {1-4503-6004-1},
	publisher = {ACM},
	author = {Karamcheti, Siddharth and Mann, Gideon and Rosenberg, David},
	year = {2018},
	keywords = {已读},
	pages = {37--47},
	file = {Karamcheti et al_2018_Adaptive Grey-Box Fuzz-Testing with Thompson Sampling.pdf:files/168/Karamcheti et al_2018_Adaptive Grey-Box Fuzz-Testing with Thompson Sampling.pdf:application/pdf}
}

@article{sperl_side-channel_2019,
	title = {Side-{Channel} {Aware} {Fuzzing}},
	volume = {259-278},
	journal = {European Symposium on Research in Computer Security. Springer, Cham,},
	author = {Sperl, {and} Konstantin Böttinger, Philip},
	year = {2019},
	keywords = {已读},
	file = {Sperl_2019_Side-Channel Aware Fuzzing.pdf:files/185/Sperl_2019_Side-Channel Aware Fuzzing.pdf:application/pdf}
}

@incollection{jitsunari_coverage-guided_2019,
	address = {New York},
	series = {{IEEE} {International} {Conference} on {Software} {Testing} {Verification} and {Validation} {Workshops}},
	title = {Coverage-guided {Learning}-assisted {Grammar}-based {Fuzzing}},
	isbn = {978-1-72810-888-9},
	url = {://WOS:000477742600041},
	abstract = {Grammar-based fuzzing is known to be an effective technique for checking security vulnerabilities in programs, such as parsers, which take complex structured inputs. Unfortunately, most of existing grammar-based fuzzers require a lot of manual efforts of writing complex input grammars, which hinders their practical use. To address this problem, recently proposed approaches use machine learning to automatically acquire a generative model for structured inputs conforming to a complex grammar. Even such approaches, however, have major limitations: they fail to learn a generative model for instruction sequences, and they cannot achieve good coverage of instruction-parsing code. To overcome such limitations. this paper proposes a collection of techniques for enhancing learning-assisited grammar-based fuzzing. Our approach allows for the learning of a generative model for instruction sequences by training a hybrid character/ token-level recursive neural network. In addition, we exploit coverage metrics gathered during previous runs of fuzzing in order to efficiently refine (or fine-tune) the learnt model so that it can make high coverage-inducing new inputs. Our experiments with a real PDF parser show that our approach succeeded in generating new sequences of instructions (in PDF page streams) that induce better code coverage (of the PDF parser) than state-of-the-art learning-assisted grammar-based fuzzers.},
	language = {English},
	booktitle = {2019 {Ieee} 12th {International} {Conference} on {Software} {Testing}, {Verification} and {Validation} {Workshops}},
	publisher = {Ieee},
	author = {Jitsunari, Y. and Arahori, Y. and {Ieee}},
	year = {2019},
	doi = {10.1109/icstw.2019.00065},
	keywords = {已读},
	pages = {275--280},
	file = {Jitsunari et al_2019_Coverage-guided Learning-assisted Grammar-based Fuzzing.pdf:files/121/Jitsunari et al_2019_Coverage-guided Learning-assisted Grammar-based Fuzzing.pdf:application/pdf}
}

@inproceedings{joffe_directing_2019,
	title = {Directing a {Search} {Towards} {Execution} {Properties} with a {Learned} {Fitness} {Function}},
	isbn = {1-72811-736-4},
	publisher = {IEEE},
	author = {Joffe, Leonid and Clark, David},
	year = {2019},
	keywords = {已读},
	pages = {206--216},
	file = {Joffe_Clark_2019_Directing a Search Towards Execution Properties with a Learned Fitness Function.pdf:files/174/Joffe_Clark_2019_Directing a Search Towards Execution Properties with a Learned Fitness Function.pdf:application/pdf}
}

@inproceedings{zhang_life_2019,
	title = {Life after {Speech} {Recognition}: {Fuzzing} {Semantic} {Misinterpretation} for {Voice} {Assistant} {Applications}},
	author = {Zhang, Yangyong and Xu, Lei and Mendoza, Abner and Yang, Guangliang and Chinprutthiwong, Phakpoom and Gu, Guofei},
	year = {2019},
	keywords = {已读},
	file = {Zhang et al_2019_Life after Speech Recognition.pdf:files/188/Zhang et al_2019_Life after Speech Recognition.pdf:application/pdf}
}

@incollection{zhao_seqfuzzer:_2019,
	address = {New York},
	series = {{IEEE} {International} {Conference} on {Software} {Testing} {Verification} and {Validation}},
	title = {{SeqFuzzer}: {An} {Industrial} {Protocol} {Fuzzing} {Framework} from a {Deep} {Learning} {Perspective}},
	isbn = {978-1-72811-736-2},
	url = {://WOS:000477739000006},
	abstract = {Industrial networks are the cornerstone of modern industrial control systems. Performing security checks of industrial communication processes helps detect unknown risks and vulnerabilities. Fuzz testing is a widely used method for performing security checks that takes advantage of automation. However, there is a big challenge to carry out security checks on industrial network due to the increasing variety and complexity of industrial communication protocols. In this case, existing approaches usually take a long time to model the protocol for generating test cases, which is labor-intensive and time-consuming. This becomes even worse when the target protocol is stateful. To help in addressing this problem, we employed a deep learning model to learn the structures of protocol frames and deal with the temporal features of stateful protocols. We propose a fuzzing framework named SeqFuzzer which automatically learns the protocol frame structures from communication traffic and generates fake but plausible messages as test cases. For proving the usability of our approach, we applied SeqFuzzer to widely-used Ethernet for Control Automation Technology (EtherCAT) devices and successfully detected several security vulnerabilities.},
	language = {English},
	booktitle = {2019 {Ieee} 12th {Conference} on {Software} {Testing}, {Validation} and {Verification}},
	publisher = {Ieee},
	author = {Zhao, H. and Li, Z. H. and Wei, H. S. and Shi, J. Q. and Huang, Y. H. and {Ieee}},
	year = {2019},
	doi = {10.1109/icst.2019.00016},
	keywords = {已读, deep learning, EtherCAT, fuzzing, industrial safety, self-learning, vulnerability mining},
	pages = {59--67},
	file = {Zhao et al_2019_SeqFuzzer.pdf:files/114/Zhao et al_2019_SeqFuzzer.pdf:application/pdf}
}

@article{bottinger_deep_2018,
	title = {Deep {Reinforcement} {Fuzzing}},
	url = {://INSPEC:17974651 https://ieeexplore.ieee.org/ielx7/8420091/8424589/08424642.pdf?tp=&arnumber=8424642&isnumber=8424589},
	doi = {10.1109/spw.2018.00026},
	abstract = {Fuzzing is the process of finding security vulnerabilities in input-processing code by repeatedly testing the code with modified inputs. In this paper, we formalize fuzzing as a reinforcement learning problem using the concept of Markov decision processes. This in turn allows us to apply state-of-the-art deep Q-learning algorithms that optimize rewards, which we define from runtime properties of the program under test. By observing the rewards caused by mutating with a specific set of actions performed on an initial program input, the fuzzing agent learns a policy that can next generate new higher-reward inputs. We have implemented this new approach, and preliminary empirical evidence shows that reinforcement fuzzing can outperform baseline random fuzzing.},
	journal = {2018 IEEE Security and Privacy Workshops (SPW). Proceedings},
	author = {Bottinger, K. and Godefroid, P. and Singh, R.},
	year = {2018},
	keywords = {已读},
	pages = {116--22},
	file = {Bottinger et al_2018_Deep Reinforcement Fuzzing.pdf:files/120/Bottinger et al_2018_Deep Reinforcement Fuzzing.pdf:application/pdf}
}

@article{chenyang_smartseed:_2018,
	title = {{SmartSeed}: {Smart} {Seed} {Generation} for {Efficient} {Fuzzing}},
	url = {://INSPEC:18015996},
	abstract = {Fuzzing is an automated application vulnerability detection method. For genetic algorithm-based fuzzing, it can mutate the seed files provided by users to obtain a number of inputs, which are then used to test the objective application in order to trigger potential crashes. As shown in existing literature, the seed file selection is crucial for the efficiency of fuzzing. However, current seed selection strategies do not seem to be better than randomly picking seed files. Therefore, in this paper, we propose a novel and generic system, named SmartSeed, to generate seed files towards efficient fuzzing. Specifically, SmartSeed is designed based on a machine learning model to learn and generate high-value binary seeds. We evaluate SmartSeed along with American Fuzzy Lop (AFL) on 12 open-source applications with the input formats of mp3, bmp or flv. We also combine SmartSeed with different fuzzing tools to examine its compatibility. From extensive experiments, we find that SmartSeed has the following advantages: First, it only requires tens of seconds to generate sufficient high-value seeds. Second, it can generate seeds with multiple kinds of input formats and significantly improves the fuzzing performance for most applications with the same input format. Third, SmartSeed is compatible to different fuzzing tools. In total, our system discovers more than twice unique crashes and 5,040 extra unique paths than the existing best seed selection strategy for the evaluated 12 applications. From the crashes found by SmartSeed, we discover 16 new vulnerabilities and have received their CVE IDs.},
	journal = {arXiv},
	author = {Chenyang, Lv and Shouling, Ji and Yuwei, Li and Junfeng, Zhou and Jianhai, Chen and Pan, Zhou and Jing, Chen},
	month = jul,
	year = {2018},
	keywords = {已读},
	pages = {17 pp.--17 pp.},
	file = {Chenyang et al_2018_SmartSeed.pdf:files/186/Chenyang et al_2018_SmartSeed.pdf:application/pdf}
}

@inproceedings{cummins_compiler_2018,
	title = {Compiler fuzzing through deep learning},
	isbn = {1-4503-5699-0},
	publisher = {ACM},
	author = {Cummins, Chris and Petoumenos, Pavlos and Murray, Alastair and Leather, Hugh},
	year = {2018},
	keywords = {已读},
	pages = {95--105},
	file = {Cummins et al_2018_Compiler fuzzing through deep learning.pdf:files/172/Cummins et al_2018_Compiler fuzzing through deep learning.pdf:application/pdf}
}

@incollection{qing_machine_2018,
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Machine {Learning} for {Black}-{Box} {Fuzzing} of {Network} {Protocols}},
	volume = {10631},
	isbn = {978-3-319-89500-0 978-3-319-89499-7},
	url = {://WOS:000460414100053 https://link.springer.com/content/pdf/10.1007%2F978-3-319-89500-0_53.pdf},
	abstract = {As the network services are gradually complex and important, the security problems of their protocols become more and more serious. Vulnerabilities in network protocol implementations can expose sensitive user data to attackers or execute arbitrary malicious code deployed by attackers. Fuzzing is an effective way to find security vulnerabilities for network protocols. But it is difficult to fuzz network protocols if the specification and implementation code of the protocol are both unavailable. In this paper, we propose a method to automatically generate test cases for black-box fuzzing of proprietary network protocols. Our method uses neural-network-based machine learning techniques to learn a generative input model of proprietary network protocols by processing their traffic, and generating new messages using the learnt model. These new messages can be used as test cases to fuzz the implementations of corresponding protocols.},
	booktitle = {Information and {Communications} {Security}, {Icics} 2017},
	author = {Fan, Rong and Chang, Yaoyao},
	editor = {Qing, S. and Mitchell, C. and Chen, L. and Liu, D.},
	year = {2018},
	doi = {10.1007/978-3-319-89500-0_53},
	keywords = {已读},
	pages = {621--632},
	file = {Fan_Chang_2018_Machine Learning for Black-Box Fuzzing of Network Protocols.pdf:files/116/Fan_Chang_2018_Machine Learning for Black-Box Fuzzing of Network Protocols.pdf:application/pdf}
}

@inproceedings{hu_ganfuzz:_2018,
	title = {{GANFuzz}: a {GAN}-based industrial network protocol fuzzing framework},
	isbn = {1-4503-5761-X},
	abstract = {In this paper, we attempt to improve industrial safety from the perspective of communication security. We leverage the protocol fuzzing technology to reveal errors and vulnerabilities inside implementations of industrial network protocols(INPs). Traditionally, to effectively conduct protocol fuzzing, the test data has to be generated under the guidance of protocol grammar, which is built either by interpreting the protocol specifications or reverse engineering from network traces. In this study, we propose an automated test case generation method, in which the protocol grammar is learned by deep learning. Generative adversarial network(GAN) is employed to train a generative model over real-world protocol messages to enable us to learn the protocol grammar. Then we can use the trained generative model to produce fake but plausible messages, which are promising test cases. Based on this approach, we present an automatical and intelligent fuzzing framework(GANFuzz) for testing implementations of INPs. Compared to prior work, GANFuzz offers a new way for this problem. Moreover, GANFuzz does not rely on protocol specification, so that it can be applied to both public and proprietary protocols, which outperforms many previous frameworks. We use GANFuzz to test several simulators of the Modbus-TCP protocol and find some errors and vulnerabilities.},
	publisher = {ACM},
	author = {Hu, Zhicheng and Shi, Jianqi and Huang, YanHong and Xiong, Jiawen and Bu, Xiangxing},
	year = {2018},
	keywords = {已读},
	pages = {138--145},
	file = {Hu et al_2018_GANFuzz.pdf:files/177/Hu et al_2018_GANFuzz.pdf:application/pdf}
}

@article{karamcheti_improving_2018,
	title = {Improving grey-box fuzzing by modeling program behavior},
	url = {://INSPEC:18360351},
	abstract = {Grey-box fuzzers such as American Fuzzy Lop (AFL) are popular tools for finding bugs and potential vulnerabilities in programs. While these fuzzers have been able to find vulnerabilities in many widely used programs, they are not efficient; of the millions of inputs executed by AFL in a typical fuzzing run, only a handful discover unseen behavior or trigger a crash. The remaining inputs are redundant, exhibiting behavior that has already been observed. Here, we present an approach to increase the efficiency of fuzzers like AFL by applying machine learning to directly model how programs behave. We learn a forward prediction model that maps program inputs to execution traces, training on the thousands of inputs collected during standard fuzzing. This learned model guides exploration by focusing on fuzzing inputs on which our model is the most uncertain (measured via the entropy of the predicted execution trace distribution). By focusing on executing inputs our learned model is unsure about, and ignoring any input whose behavior our model is certain about, we show that we can significantly limit wasteful execution. Through testing our approach on a set of binaries released as part of the DARPA Cyber Grand Challenge, we show that our approach is able to find a set of inputs that result in more code coverage and discovered crashes than baseline fuzzers with significantly fewer executions.},
	journal = {arXiv},
	author = {Karamcheti, S. and Mann, G. and Rosenberg, D.},
	month = nov,
	year = {2018},
	keywords = {已读},
	pages = {6 pp.--6 pp.},
	file = {Karamcheti et al_2018_Improving grey-box fuzzing by modeling program behavior.pdf:files/189/Karamcheti et al_2018_Improving grey-box fuzzing by modeling program behavior.pdf:application/pdf}
}

@article{cheng_optimizing_2019,
	title = {Optimizing seed inputs in fuzzing with machine learning},
	abstract = {The success of a fuzzing campaign is heavily depending on the quality of seed inputs used for test generation. It is however challenging to compose a corpus of seed inputs that enable high code and behavior coverage of the target program, especially when the target program requires complex input formats such as PDF files. We present a machine learning based framework to improve the quality of seed inputs for fuzzing programs that take PDF files as input. Given an initial set of seed PDF files, our framework utilizes a set of neural networks to 1) discover the correlation between these PDF files and the execution in the target program, and 2) leverage such correlation to generate new seed files that more likely explore new paths in the target program. Our experiments on a set of widely used PDF viewers demonstrate that the improved seed inputs produced by our framework could significantly increase the code coverage of the target program and the likelihood of detecting program crashes.},
	author = {Cheng, Liang and Zhang, Yang and Zhang, Yi and Wu, Chen and Li, Zhangtan and Fu, Yu and Li, Haisheng \%J arXiv preprint arXiv:.02538},
	year = {2019},
	keywords = {已读},
	file = {Cheng et al_2019_Optimizing seed inputs in fuzzing with machine learning.pdf:files/183/Cheng et al_2019_Optimizing seed inputs in fuzzing with machine learning.pdf:application/pdf}
}

@incollection{rosu_learn&_2017,
	series = {{IEEE} {ACM} {International} {Conference} on {Automated} {Software} {Engineering}},
	title = {Learn\& {Fuzz}: {Machine} {Learning} for {Input} {Fuzzing}},
	isbn = {978-1-5386-2684-9},
	url = {://WOS:000417469700009},
	abstract = {Fuzzing consists of repeatedly testing an application with modified, or fuzzed, inputs with the goal of finding security vulnerabilities in input-parsing code. In this paper, we show how to automate the generation of an input grammar suitable for input fuzzing using sample inputs and neural-network-based statistical machine-learning techniques. We present a detailed case study with a complex input format, namely PDF, and a large complex security-critical parser for this format, namely, the PDF parser embedded in Microsoft's new Edge browser. We discuss and measure the tension between conflicting learning and fuzzing goals: learning wants to capture the structure of well-formed inputs, while fuzzing wants to break that structure in order to cover unexpected code paths and find bugs. We also present a new algorithm for this learn\& fuzz challenge which uses a learnt input probability distribution to intelligently guide where to fuzz inputs.},
	booktitle = {Proceedings of the 2017 32nd {Ieee}/{Acm} {International} {Conference} on {Automated} {Software} {Engineering}},
	author = {Godefroid, Patrice and Peleg, Hila and Singh, Rishabh},
	editor = {Rosu, G. and DiPenta, M. and Nguyen, T. N.},
	year = {2017},
	keywords = {已读},
	pages = {50--59},
	file = {Godefroid et al_2017_Learn& Fuzz.pdf:files/178/Godefroid et al_2017_Learn& Fuzz.pdf:application/pdf}
}

@article{li_v-fuzz:_2019,
	title = {V-{Fuzz}: {Vulnerability}-{Oriented} {Evolutionary} {Fuzzing}},
	author = {Li, Yuwei and Ji, Shouling and Lv, Chenyang and Chen, Yuan and Chen, Jianhai and Gu, Qinchen and Wu, Chunming \%J arXiv preprint arXiv:.01142},
	year = {2019},
	keywords = {已读},
	file = {Li et al_2019_V-Fuzz.pdf:files/187/Li et al_2019_V-Fuzz.pdf:application/pdf}
}

@article{liu_reinforcement_2019,
	title = {Reinforcement {Compiler} {Fuzzing}},
	journal = {ICML},
	author = {Liu, Xiao and Prajapati, Rupesh and Li, Xiaoting and Wu, Dinghao},
	year = {2019},
	keywords = {已读},
	file = {Liu et al_2019_Reinforcement Compiler Fuzzing.pdf:files/184/Liu et al_2019_Reinforcement Compiler Fuzzing.pdf:application/pdf}
}

@article{nasrabadi_neural_2018,
	title = {Neural fuzzing: a neural approach to generate test data for file format fuzzing},
	url = {://INSPEC:18417124},
	abstract = {This article is aimed at the design and implementation of a file format fuzzer. Files are significant inputs to the most of real-world applications. A substantial difficulty with generating input files as test data is to recon the underlying structure and format of the files. In order to distinguish pure data stored in a file from the meta-data describing the file format, a deep learning method based on a neural language model is proposed in this article. The resultant learned model could be applied as a hybrid test data generator, to generate and fuzz both the textual and none-textual sections of the input file. Moreover, the model could be applied to generate test data to fuzz both the meta-data and the ordinary data stored in the file. Our experiments with two known fuzzing tools, AFL and Learn\&Fuzz, demonstrate the relatively high code coverage of our proposed method. The experiments also indicate simple neural language models provide a more accurate learning model, than the complicated encoder-decoder models.},
	journal = {arXiv},
	author = {Nasrabadi, M. Z. and Parsa, S. and Kalaee, A.},
	month = dec,
	year = {2018},
	keywords = {已读},
	pages = {42 pp.--42 pp.},
	file = {Nasrabadi et al_2018_Neural fuzzing.pdf:files/180/Nasrabadi et al_2018_Neural fuzzing.pdf:application/pdf}
}

@book{kwangsu_recurrent_2019,
	series = {Information {Security} and {Cryptology} - {ICISC} 2018. 21st {International} {Conference}. {Revised} {Selected} {Papers}: {Lecture} {Notes} in {Computer} {Science}},
	title = {Recurrent neural networks for fuzz testing web browsers},
	isbn = {978-3-030-12145-7},
	url = {://INSPEC:18400275 https://link.springer.com/chapter/10.1007%2F978-3-030-12146-4_22},
	abstract = {Generation-based fuzzing is a software testing approach which is able to discover different types of bugs and vulnerabilities in software. It is, however, known to be very time consuming to design and fine tune classical fuzzers to achieve acceptable coverage, even for small-scale software systems. To address this issue, we investigate a machine learning-based approach to fuzz testing in which we outline a family of test-case generators based on Recurrent Neural Networks (RNNs) and train those on readily available datasets with a minimum of human fine tuning. The proposed generators do, in contrast to previous work, not rely on heuristic sampling strategies but principled sampling from the predictive distributions. We provide a detailed analysis to demonstrate the characteristics and efficacy of the proposed generators in a challenging web browser testing scenario. The empirical results show that the RNN-based generators are able to provide better coverage than a mutation based method and are able to discover paths not discovered by a classical fuzzer. Our results supplement findings in other domains suggesting that generation based fuzzing with RNNs is a viable route to better software quality conditioned on the use of a suitable model selection/analysis procedure.},
	author = {Sablotny, M. and Jensen, B. S. and Johnson, C. W.},
	editor = {Kwangsu, Lee},
	year = {2019},
	doi = {10.1007/978-3-030-12146-4_22},
	keywords = {已读},
	file = {Sablotny et al_2019_Recurrent neural networks for fuzz testing web browsers.pdf:files/115/Sablotny et al_2019_Recurrent neural networks for fuzz testing web browsers.pdf:application/pdf}
}

@article{li_intelligent_2019,
	title = {An {Intelligent} {Fuzzing} {Data} {Generation} {Method} {Based} on {Deep} {Adversarial} {Learning}},
	volume = {7},
	issn = {2169-3536},
	journal = {IEEE Access},
	author = {Li, Zhihui and Zhao, Hui and Shi, Jianqi and Huang, Yanhong and Xiong, Jiawen \%J IEEE Access},
	year = {2019},
	keywords = {已读},
	pages = {49327--49340},
	file = {Li et al_2019_An Intelligent Fuzzing Data Generation Method Based on Deep Adversarial Learning.pdf:files/170/Li et al_2019_An Intelligent Fuzzing Data Generation Method Based on Deep Adversarial Learning.pdf:application/pdf}
}

@inproceedings{liu_automatic_2017,
	title = {Automatic text input generation for mobile testing},
	isbn = {1-5386-3868-1},
	url = {https://ieeexplore.ieee.org/document/7985701/ https://ieeexplore.ieee.org/ielx7/7976701/7985634/07985701.pdf?tp=&arnumber=7985701&isnumber=7985634},
	doi = {10.1109/ICSE.2017.65},
	abstract = {Many designs have been proposed to improve the automated mobile testing. Despite these improvements, providing appropriate text inputs remains a prominent obstacle, which hinders the large-scale adoption of automated testing approaches. The key challenge is how to automatically produce the most relevant text in a use case context. For example, a valid website address should be entered in the address bar of a mobile browser app to continue the testing of the app; a singer's name should be entered in the search bar of a music recommendation app. Without the proper text inputs, the testing would get stuck. We propose a novel deep learning based approach to address the challenge, which reduces the problem to a minimization problem. Another challenge is how to make the approach generally applicable to both the trained apps and the untrained apps. We leverage the Word2Vec model to address the challenge. We have built our approaches as a tool and evaluated it with 50 iOS mobile apps including Firefox and Wikipedia. The results show that our approach significantly outperforms existing automatic text input generation methods.},
	publisher = {IEEE Press},
	author = {Liu, Peng and Zhang, Xiangyu and Pistoia, Marco and Zheng, Yunhui and Marques, Manoel and Zeng, Lingfei},
	year = {2017},
	keywords = {已读},
	pages = {643--653},
	file = {Liu et al_2017_Automatic text input generation for mobile testing.pdf:files/122/Liu et al_2017_Automatic text input generation for mobile testing.pdf:application/pdf}
}

@article{liu_deepfuzz:_2019,
	title = {{DeepFuzz}: {Automatic} {Generation} of {Syntax} {Valid} {C} {Programs} for {Fuzz} {Testing}},
	abstract = {Compilers are among the most fundamental programming tools for building software. However, production compilers remain buggy. Fuzz testing is often leveraged with newlygenerated, or mutated inputs in order to find new bugs or security vulnerabilities. In this paper, we propose a grammarbased fuzzing tool called DEEPFUZZ. Based on a generative Sequence-to-Sequence model, DEEPFUZZ automatically and continuously generates well-formed C programs. We use this set of new C programs to fuzz off-the-shelf C compilers, e.g., GCC and Clang/LLVM. We present a detailed case study to analyze the success rate and coverage improvement of the generated C programs for fuzz testing. We analyze the performance of DEEPFUZZ with three types of sampling methods as well as three types of generation strategies. Consequently, DEEPFUZZ improved the testing efficacy in regards to the line, function, and branch coverage. In our preliminary study, we found and reported 8 bugs of GCC, all of which are actively being addressed by developers.},
	author = {Liu, Xiao and Li, Xiaoting and Prajapati, Rupesh and Wu, Dinghao},
	year = {2019},
	keywords = {已读},
	file = {Liu et al_2019_DeepFuzz.pdf:files/173/Liu et al_2019_DeepFuzz.pdf:application/pdf}
}

@article{nichols_faster_2017,
	title = {Faster fuzzing: {Reinitialization} with deep neural models},
	abstract = {We improve the performance of the American Fuzzy Lop (AFL) fuzz testing framework by using Generative Adversarial Network (GAN) models to reinitialize the system with novel seed files. We assess performance based on the temporal rate at which we produce novel and unseen code paths. We compare this approach to seed file generation from a random draw of bytes observed in the training seed files. The code path lengths and variations were not sufficiently diverse to fully replace AFL input generation. However, augmenting native AFL with these additional code paths demonstrated improvements over AFL alone. Specifically, experiments showed the GAN was faster and more effective than the LSTM and out-performed a random augmentation strategy, as measured by the number of unique code paths discovered. GAN helps AFL discover 14.23\% more code paths than the random strategy in the same amount of CPU time, finds 6.16\% more unique code paths, and finds paths that are on average 13.84\% longer. Using GAN shows promise as a reinitialization strategy for AFL to help the fuzzer exercise deep paths in software.},
	author = {Nichols, Nicole and Raugas, Mark and Jasper, Robert and Hilliard, Nathan \%J arXiv preprint arXiv:.02807},
	year = {2017},
	keywords = {已读},
	file = {Nichols et al_2017_Faster fuzzing.pdf:files/176/Nichols et al_2017_Faster fuzzing.pdf:application/pdf}
}

@article{rajpal_not_2017,
	title = {Not all bytes are equal: {Neural} byte sieve for fuzzing},
	journal = {CoRR},
	author = {Rajpal, Mohit and Blum, William and Singh, Rishabh \%J arXiv preprint arXiv:.04596},
	year = {2017},
	keywords = {已读},
	file = {Rajpal et al_2017_Not all bytes are equal.pdf:files/182/Rajpal et al_2017_Not all bytes are equal.pdf:application/pdf}
}

@article{she_neuzz:_2019,
	title = {{NEUZZ}: {Efficient} {Fuzzing} with {Neural} {Program} {Smoothing}},
	volume = {89},
	abstract = {Fuzzing has become the de facto standard technique for finding software vulnerabilities. However, even state-of-the-art fuzzers are not very efficient at finding hard-to-trigger software bugs. Most popular fuzzers use evolutionary guidance to generate inputs that can trigger different bugs. Such evolutionary algorithms, while fast and simple to implement, often get stuck in fruitless sequences of random mutations. Gradient-guided optimization presents a promising alternative to evolutionary guidance. Gradient-guided techniques have been shown to significantly outperform evolutionary algorithms at solving high-dimensional structured optimization problems in domains like machine learning by efficiently utilizing gradients or higher-order derivatives of the underlying function. However, gradient-guided approaches are not directly applicable to fuzzing as real-world program behaviors contain many discontinuities, plateaus, and ridges where the gradient-based methods often get stuck. We observe that this problem can be addressed by creating a smooth surrogate function approximating the discrete branching behavior of target program. In this paper, we propose a novel program smoothing technique using surrogate neural network models that can incrementally learn smooth approximations of a complex, real-world program's branching behaviors. We further demonstrate that such neural network models can be used together with gradient-guided input generation schemes to significantly improve the fuzzing efficiency. Our extensive evaluations demonstrate that NEUZZ significantly outperforms 10 state-of-the-art graybox fuzzers on 10 real-world programs both at finding new bugs and achieving higher edge coverage. NEUZZ found 31 unknown bugs that other fuzzers failed to find in 10 real world programs and achieved 3X more edge coverage than all of the tested graybox fuzzers for 24 hours running.},
	number = {46},
	journal = {S\&P},
	author = {She, Dongdong and Pei, Kexin and Epstein, Dave and Yang, Junfeng and Ray, Baishakhi and Jana, Suman \%J machine learning},
	year = {2019},
	keywords = {已读},
	pages = {38},
	file = {She et al_2019_NEUZZ.pdf:files/181/She et al_2019_NEUZZ.pdf:application/pdf}
}

@book{guojun_learn_2017,
	series = {Security, {Privacy}, and {Anonymity} in {Computation}, {Communication}, and {Storage}. 10th {International} {Conference}, {SpaCCS} 2017. {Proceedings}: {LNCS} 10656},
	title = {Learn to {Accelerate} {Identifying} {New} {Test} {Cases} in {Fuzzing}},
	isbn = {978-3-319-72388-4},
	url = {://INSPEC:17567016 https://link.springer.com/content/pdf/10.1007%2F978-3-319-72389-1_24.pdf},
	abstract = {Fuzzing is an efficient testing technique to catch bugs early, before they turn into vulnerabilities. Without complex program analysis, it can generates interesting test cases by slightly changing input and find potential bugs in programs. However, previous fuzzers either are unable to explore deeper bugs, or some of them suffer from dramatic time complexity, thus we cannot depend on them in real world applications. In this paper, we focus on reducing time complexity in fuzzing by combining practical and light-weight deep learning methods, which fundamentally accelerate the process of identifying new test cases and finding bugs. In order to achieve expected fuzzing coverage, we implement our method by extending stage-of-the-art fuzzer AFL with deep learning methods and evaluate it on several wide-used and open source executable programs. On all of these programs, efficiency of our method is witnessed and significantly better outcomes are generated.},
	author = {Weiwei, Gong and Gen, Zhang and Xu, Zhou},
	editor = {Guojun, Wang and Atiquzzaman, M. and Zheng, Yan and Choo, K. K. R.},
	year = {2017},
	doi = {10.1007/978-3-319-72389-1_24},
	keywords = {已读},
	file = {Weiwei et al_2017_Learn to Accelerate Identifying New Test Cases in Fuzzing.pdf:files/117/Weiwei et al_2017_Learn to Accelerate Identifying New Test Cases in Fuzzing.pdf:application/pdf}
}

@inproceedings{tripathi_exniffer:_2017,
	title = {Exniffer: {Learning} to prioritize crashes by assessing the exploitability from memory dump},
	isbn = {1-5386-3681-6},
	publisher = {IEEE},
	author = {Tripathi, Shubham and Grieco, Gustavo and Rawat, Sanjay},
	year = {2017},
	keywords = {已读},
	pages = {239--248},
	file = {Tripathi et al_2017_Exniffer.pdf:files/175/Tripathi et al_2017_Exniffer.pdf:application/pdf}
}

@article{wang_neufuzz:_2019,
	title = {{NeuFuzz}: {Efficient} {Fuzzing} {With} {Deep} {Neural} {Network}},
	volume = {7},
	issn = {2169-3536},
	author = {Wang, Yunchao and Wu, Zehui and Wei, Qiang and Wang, Qingxian \%J IEEE Access},
	year = {2019},
	keywords = {已读},
	pages = {36340--36352},
	file = {Wang et al_2019_NeuFuzz.pdf:files/179/Wang et al_2019_NeuFuzz.pdf:application/pdf}
}

@incollection{sivakorn_hvlearn:_2017,
	series = {{IEEE} {Symposium} on {Security} and {Privacy}},
	title = {{HVLearn}: {Automated} {Black}-box {Analysis} of {Hostname} {Verification} in {SSL}/{TLS} {Implementations}},
	isbn = {978-1-5090-5533-3},
	url = {://WOS:000413081300029 https://ieeexplore.ieee.org/ielx7/7957740/7958557/07958596.pdf?tp=&arnumber=7958596&isnumber=7958557},
	abstract = {SSL/TLS is the most commonly deployed family of protocols for securing network communications. The security guarantees of SSL/TLS are critically dependent on the correct validation of the X.509 server certificates presented during the handshake stage of the SSL/TLS protocol. Hostname verification is a critical component of the certificate validation process that verifies the remote server's identity by checking if the hostname of the server matches any of the names present in the X.509 certificate. Hostname verification is a highly complex process due to the presence of numerous features and corner cases such as wildcards, IP addresses, international domain names, and so forth. Therefore, testing hostname verification implementations present a challenging task. In this paper, we present HVLearn, a novel black-box testing framework for analyzing SSL/TLS hostname verification implementations, which is based on automata learning algorithms. HVLearn utilizes a number of certificate templates, i.e., certificates with a common name (CN) set to a specific pattern, in order to test different rules from the corresponding specification. For each certificate template, HVLearn uses automata learning algorithms to infer a Deterministic Finite Automaton (DFA) that describes the set of all hostnames that match the CN of a given certificate. Once a model is inferred for a certificate template, HVLearn checks the model for bugs by finding discrepancies with the inferred models from other implementations or by checking against regular-expression-based rules derived from the specification. The key insight behind our approach is that the acceptable hostnames for a given certificate template form a regular language. Therefore, we can leverage automata learning techniques to efficiently infer DFA models that accept the corresponding regular language. We use HVLearn to analyze the hostname verification implementations in a number of popular SSL/TLS libraries and applications written in a diverse set of languages like C, Python, and Java. We demonstrate that HVLearn can achieve on average 11.21\% higher code coverage than existing black/gray-box fuzzing techniques. By comparing the DFA models inferred by HVLearn, we found 8 unique violations of the RFC specifications in the tested hostname verification implementations. Several of these violations are critical and can render the affected implementations vulnerable to active man-in-the-middle attacks.},
	booktitle = {2017 {Ieee} {Symposium} on {Security} and {Privacy}},
	author = {Sivakorn, Suphannee and Argyros, George and Pei, Kexin and Keromytis, Angelos D. and Jana, Suman and {Ieee}},
	year = {2017},
	doi = {10.1109/sp.2017.46},
	keywords = {已读},
	pages = {521--538},
	file = {Sivakorn et al_2017_HVLearn.pdf:files/107/Sivakorn et al_2017_HVLearn.pdf:application/pdf}
}

@inproceedings{wang_skyfire:_2017,
	address = {San Jose, CA, United states},
	series = {Proceedings - {IEEE} {Symposium} on {Security} and {Privacy}},
	title = {Skyfire: {Data}-{Driven} {Seed} {Generation} for {Fuzzing}},
	volume = {0},
	isbn = {10816011},
	url = {http://dx.doi.org/10.1109/SP.2017.23},
	doi = {10.1109/SP.2017.23},
	abstract = {Programs that take highly-structured files as inputs normally process inputs in stages: syntax parsing, semantic checking, and application execution. Deep bugs are often hidden in the application execution stage, and it is non-trivial to automatically generate test inputs to trigger them. Mutation-based fuzzing generates test inputs by modifying well-formed seed inputs randomly or heuristically. Most inputs are rejected at the early syntax parsing stage. Differently, generation-based fuzzing generates inputs from a specification (e.g., grammar). They can quickly carry the fuzzing beyond the syntax parsing stage. However, most inputs fail to pass the semantic checking (e.g., violating semantic rules), which restricts their capability of discovering deep bugs. In this paper, we propose a novel data-driven seed generation approach, named Skyfire, which leverages the knowledge in the vast amount of existing samples to generate well-distributed seed inputs for fuzzing programs that process highly-structured inputs. Skyfire takes as inputs a corpus and a grammar, and consists of two steps. The first step of Skyfire learns a probabilistic context-sensitive grammar (PCSG) to specify both syntax features and semantic rules, and then the second step leverages the learned PCSG to generate seed inputs. We fed the collected samples and the inputs generated by Skyfire as seeds of AFL to fuzz several open-source XSLT and XML engines (i.e., Sablotron, libxslt, and libxml2). The results have demonstrated that Skyfire can generate well-distributed inputs and thus significantly improve the code coverage (i.e., 20\% for line coverage and 15\% for function coverage on average) and the bug-finding capability of fuzzers. We also used the inputs generated by Skyfire to fuzz the closed-source JavaScript and rendering engine of Internet Explorer 11. Altogether, we discovered 19 new memory corruption bugs (among which there are 16 new vulnerabilities and received 33.5k USD bug bounty rewards) and 32 denial-of-service bugs. 2017 IEEE.},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	author = {Wang, Junjie and Chen, Bihuan and Wei, Lei and Liu, Yang},
	year = {2017},
	keywords = {已读, Application programs, Context sensitive grammars, Denial-of-service attack, Engines, Program debugging, Semantics, Syntactics},
	pages = {579--594},
	file = {Wang et al_2017_Skyfire.pdf:files/113/Wang et al_2017_Skyfire.pdf:application/pdf}
}

@book{xiaoshan_improving_2018,
	series = {2018 {IEEE} 42nd {Annual} {Computer} {Software} and {Applications} {Conference}},
	title = {Improving {Fitness} {Function} for {Language} {Fuzzing} with {PCFG} {Model}},
	isbn = {978-1-5386-2666-5},
	url = {://INSPEC:18132113 https://ieeexplore.ieee.org/ielx7/8376143/8377622/08377723.pdf?tp=&arnumber=8377723&isnumber=8377622},
	abstract = {In this paper, we propose to use machine learning techniques to model the vagueness of bugs for language interpreters and develop a fitness function for the language fuzzing based on genetic programming. The basic idea is that bug-triggering scripts usually contain uncommon usages which are not likely used by programmers in daily developments. We capture the uncommonness by using the probabilistic context-free grammar model and the Markov model to compute the probabilities of scripts such that bug-triggering scripts will get lower probabilities and higher fitness values. We choose the ROC (Receiver Operating Characteristic) curves to evaluate the performance of fitness functions in identifying bug-triggering scripts from normal scripts. We use a large corpus of JavaScript scripts from Github and POC test cases of bug-reports from SpiderMonkey's bugzilla for evaluations. The ROC curves from the experiments show that our method can provide better ability to rank the bug triggering scripts in the top-K elements.},
	author = {Xiaoshan, Sun and Yu, Fu and Yun, Dong and Zhihao, Liu and Yang, Zhang},
	year = {2018},
	doi = {10.1109/compsac.2018.00098},
	keywords = {已读},
	file = {Xiaoshan et al_2018_Improving Fitness Function for Language Fuzzing with PCFG Model.pdf:files/118/Xiaoshan et al_2018_Improving Fitness Function for Language Fuzzing with PCFG Model.pdf:application/pdf}
}

@book{yan_exploitmeter:_2017,
	series = {2017 1st {Ieee} {Symposium} on {Privacy}-{Aware} {Computing}},
	title = {{ExploitMeter}: {Combining} {Fuzzing} with {Machine} {Learning} for {Automated} {Evaluation} of {Software} {Exploitability}},
	isbn = {978-1-5386-1027-5},
	url = {://WOS:000428577000015 https://ieeexplore.ieee.org/ielx7/8126807/8166602/08166625.pdf?tp=&arnumber=8166625&isnumber=8166602},
	abstract = {Exploitable software vulnerabilities pose severe threats to its information security and privacy. Although a great amount of efforts have been dedicated to improving software security, research on quantifying software exploitability is still in its infancy. In this work, we propose ExploitMeter, a fuzzing-based framework of quantifying software exploitability that facilitates decision-making for software assurance and cyber insurance. Designed to be dynamic, efficient and rigorous, ExploitMeter integrates machine learning-based prediction and dynamic fuzzing tests in a Bayesian manner. Using 100 Linux applications, we conduct extensive experiments to evaluate the performance of ExploitMeter in a dynamic environment.},
	author = {Yan, Guanhua and Lu, Junchen and Shu, Zhan and Kucuk, Yunus and {Ieee}},
	year = {2017},
	doi = {10.1109/pac.2017.10},
	keywords = {已读},
	file = {Yan et al_2017_ExploitMeter.pdf:files/119/Yan et al_2017_ExploitMeter.pdf:application/pdf}
}

@inproceedings{zhang_assisting_2018,
	title = {Assisting {Vulnerability} {Detection} by {Prioritizing} {Crashes} with {Incremental} {Learning}},
	isbn = {1-5386-5457-1},
	publisher = {IEEE},
	author = {Zhang, Li and Thing, Vrizlynn LL},
	year = {2018},
	keywords = {已读},
	pages = {2080--2085},
	file = {Zhang_Thing_2018_Assisting Vulnerability Detection by Prioritizing Crashes with Incremental.pdf:files/171/Zhang_Thing_2018_Assisting Vulnerability Detection by Prioritizing Crashes with Incremental.pdf:application/pdf}
}

@article{sun_application_2018,
	title = {Application of artificial intelligence technology in the field of security vulnerability},
	volume = {39},
	issn = {1000436X},
	url = {http://dx.doi.org/10.11959/j.issn.1000-436x.2018137},
	doi = {10.11959/j.issn.1000-436x.2018137},
	abstract = {The large number of software and the enhancement of complexity have brought severe challenges to the research of software security vulnerabilities. The efficiency of manual research on security vulnerabilities is low and cannot meet the needs of cyberspace security. Therefore, how to apply artificial intelligence techniques such as machine learning and natural language processing to the study of security vulnerabilities has become a new hot spot. Artificial intelligence technology can intelligently process vulnerability information, which can assist in the research of security vulnerabilities and improve the efficiency of research on security vulnerabilities such as vulnerability mining. Firstly, the key technologies of automatic mining, automatic assessment, automatic exploitation and automatic repair of security vulnerabilities were analyzed, which pointed out that the automation of security vulnerability mining was the key of the application of artificial intelligence in the field of security vulnerability. Then, the latest research results of applying artificial intelligence technology to the research on security vulnerabilities was analyzed and summarized in recent years, which pointed out some problems in the application and gave corresponding solutions. Finally, the development trend of intelligent research on security vulnerabilities was prospected. 2018, Editorial Board of Journal on Communications. All right reserved.},
	number = {8},
	journal = {Tongxin Xuebao/Journal on Communications},
	author = {Sun, Hongyu and He, Yuan and Wang, Jice and Dong, Ying and Zhu, Lipeng and Wang, He and Zhang, Yuqing},
	year = {2018},
	keywords = {已读, Artificial intelligence, Efficiency, Learning algorithms, Learning systems, Natural language processing systems, Security of data},
	pages = {1--17},
	file = {Sun et al_2018_Application of artificial intelligence technology in the field of security.pdf:files/112/Sun et al_2018_Application of artificial intelligence technology in the field of security.pdf:application/pdf}
}

@inproceedings{zhao_suzzer_2019,
	title = {Suzzer: {A} {Vulnerability}-{Guided} {Fuzzer} {Based} on {Deep} {Learning}},
	shorttitle = {Suzzer},
	booktitle = {International {Conference} on {Information} {Security} and {Cryptology}},
	publisher = {Springer},
	author = {Zhao, Yuyue and Li, Yangyang and Yang, Tengfei and Xie, Haiyong},
	year = {2019},
	keywords = {粗读},
	pages = {134--153},
	file = {Zhao et al_2019_Suzzer.pdf:files/723/Zhao et al_2019_Suzzer.pdf:application/pdf}
}

@inproceedings{chen_learning-guided_2019,
	title = {Learning-{Guided} {Network} {Fuzzing} for {Testing} {Cyber}-{Physical} {System} {Defences}},
	booktitle = {2019 34th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering} ({ASE})},
	publisher = {IEEE},
	author = {Chen, Yuqi and Poskitt, Christopher M. and Sun, Jun and Adepu, Sridhar and Zhang, Fan},
	year = {2019},
	keywords = {粗读},
	pages = {962--973},
	file = {Chen et al_2019_Learning-Guided Network Fuzzing for Testing Cyber-Physical System Defences.pdf:files/469/Chen et al_2019_Learning-Guided Network Fuzzing for Testing Cyber-Physical System Defences.pdf:application/pdf}
}

@article{lai_vulnerability_2020,
	title = {Vulnerability {Mining} {Method} for the {Modbus} {TCP} {Using} an {Anti}-{Sample} {Fuzzer}},
	volume = {20},
	number = {7},
	journal = {Sensors},
	author = {Lai, Yingxu and Gao, Huijuan and Liu, Jing},
	year = {2020},
	note = {Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {粗读},
	pages = {2040},
	file = {Lai et al_2020_Vulnerability Mining Method for the Modbus TCP Using an Anti-Sample Fuzzer.pdf:files/472/Lai et al_2020_Vulnerability Mining Method for the Modbus TCP Using an Anti-Sample Fuzzer.pdf:application/pdf}
}

@inproceedings{gao_stacked_2019,
	title = {The {Stacked} {Seq2seq}-attention {Model} for {Protocol} {Fuzzing}},
	booktitle = {2019 {IEEE} 7th {International} {Conference} on {Computer} {Science} and {Network} {Technology} ({ICCSNT})},
	publisher = {IEEE},
	author = {Gao, Zicong and Dong, Weiyu and Chang, Rui and Ai, Chengwei},
	year = {2019},
	keywords = {粗读},
	pages = {126--130},
	file = {Gao et al_2019_The Stacked Seq2seq-attention Model for Protocol Fuzzing.pdf:files/722/Gao et al_2019_The Stacked Seq2seq-attention Model for Protocol Fuzzing.pdf:application/pdf}
}

@inproceedings{kuznetsov_automated_2019,
	title = {Automated {Software} {Vulnerability} {Testing} {Using} {Deep} {Learning} {Methods}},
	booktitle = {2019 {IEEE} 2nd {Ukraine} {Conference} on {Electrical} and {Computer} {Engineering} ({UKRCON})},
	publisher = {IEEE},
	author = {Kuznetsov, Alexandr and Yeromin, Yehor and Shapoval, Oleksiy and Chernov, Kyrylo and Popova, Mariia and Serdukov, Kostyantyn},
	year = {2019},
	keywords = {粗读},
	pages = {837--841},
	file = {Kuznetsov et al_2019_Automated Software Vulnerability Testing Using Deep Learning Methods.pdf:files/721/Kuznetsov et al_2019_Automated Software Vulnerability Testing Using Deep Learning Methods.pdf:application/pdf}
}

@article{chen_meuzz_2020,
	title = {{MEUZZ}: {Smart} {Seed} {Scheduling} for {Hybrid} {Fuzzing}},
	shorttitle = {{MEUZZ}},
	journal = {arXiv preprint arXiv:2002.08568},
	author = {Chen, Yaohui and Ahmadi, Mansour and Wang, Boyu and Lu, Long},
	year = {2020},
	keywords = {粗读},
	file = {Chen et al_2020_MEUZZ.pdf:files/482/Chen et al_2020_MEUZZ.pdf:application/pdf}
}

@inproceedings{noauthor_montage_2020,
	title = {Montage: {A} {Neural} {Network} {Language} {Model}-{Guided} {JavaScript} {Engine} {Fuzzer}},
	shorttitle = {Montage},
	url = {https://www.usenix.org/conference/usenixsecurity20/presentation/lee-suyoung},
	language = {en},
	urldate = {2020-05-12},
	year = {2020},
	keywords = {粗读},
	file = {2020_Montage.pdf:files/550/2020_Montage.pdf:application/pdf}
}

@inproceedings{noauthor_fuzzguard_2020,
	title = {{FuzzGuard}: {Filtering} out {Unreachable} {Inputs} in {Directed} {Grey}-box {Fuzzing} through {Deep} {Learning}},
	copyright = {☆☆☆☆☆☆},
	shorttitle = {{FuzzGuard}},
	url = {https://www.usenix.org/conference/usenixsecurity20/presentation/zong},
	language = {en},
	urldate = {2020-05-12},
	year = {2020},
	keywords = {粗读},
	file = {2020_FuzzGuard.pdf:files/551/2020_FuzzGuard.pdf:application/pdf}
}

@inproceedings{he_learning_2019,
	address = {London, United Kingdom},
	series = {{CCS} '19},
	title = {Learning to {Fuzz} from {Symbolic} {Execution} with {Application} to {Smart} {Contracts}},
	isbn = {978-1-4503-6747-9},
	url = {https://doi.org/10.1145/3319535.3363230},
	doi = {10.1145/3319535.3363230},
	abstract = {Fuzzing and symbolic execution are two complementary techniques for discovering software vulnerabilities. Fuzzing is fast and scalable, but can be ineffective when it fails to randomly select the right inputs. Symbolic execution is thorough but slow and often does not scale to deep program paths with complex path conditions. In this work, we propose to learn an effective and fast fuzzer from symbolic execution, by phrasing the learning task in the framework of imitation learning. During learning, a symbolic execution expert generates a large number of quality inputs improving coverage on thousands of programs. Then, a fuzzing policy, represented with a suitable architecture of neural networks, is trained on the generated dataset. The learned policy can then be used to fuzz new programs. We instantiate our approach to the problem of fuzzing smart contracts, a domain where contracts often implement similar functionality (facilitating learning) and security is of utmost importance. We present an end-to-end system, ILF (for Imitation Learning based Fuzzer), and an extensive evaluation over {\textgreater}18K contracts. Our results show that ILF is effective: (i) it is fast, generating 148 transactions per second, (ii) it outperforms existing fuzzers (e.g., achieving 33\% more coverage), and (iii) it detects more vulnerabilities than existing fuzzing and symbolic execution tools for Ethereum.},
	urldate = {2020-05-12},
	booktitle = {Proceedings of the 2019 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {He, Jingxuan and Balunović, Mislav and Ambroladze, Nodar and Tsankov, Petar and Vechev, Martin},
	month = nov,
	year = {2019},
	keywords = {fuzzing, 粗读, imitation learning, smart contracts, symbolic execution},
	pages = {531--548},
	file = {He et al_2019_Learning to Fuzz from Symbolic Execution with Application to Smart Contracts.pdf:files/599/He et al_2019_Learning to Fuzz from Symbolic Execution with Application to Smart Contracts.pdf:application/pdf}
}

@inproceedings{raj_work--progress_2017,
	title = {Work-in-progress: testing autonomous cyber-physical systems using fuzzing features from convolutional neural networks},
	shorttitle = {Work-in-progress},
	doi = {10.1145/3125503.3125568},
	abstract = {Autonomous cyber-physical systems rely on modern machine learning methods such as deep neural networks to control their interactions with the physical world. Testing of such intelligent cyberphysical systems is a challenge due to the huge state space associated with high-resolution visual sensory inputs. We demonstrate how fuzzing the input using patterns obtained from the convolutional filters of an unrelated convolutional neural network can be used to test computer vision algorithms implemented in intelligent cyber-physical systems. Our method discovers interesting counterexamples to a pedestrian detection algorithm implemented in the popular OpenCV library. Our approach also unearths counterexamples to the correct behavior of an autonomous car similar to NVIDIA's end-to-end self-driving deep neural net running on the Udacity open-source simulator.},
	booktitle = {2017 {International} {Conference} on {Embedded} {Software} ({EMSOFT})},
	author = {Raj, Sunny and Jha, Sumit Kumar and Ramanathan, Arvind and Pullum, Laura L.},
	month = oct,
	year = {2017},
	note = {00000},
	keywords = {粗读, Autonomous automobiles, autonomous car, autonomous cyber-physical systems, computer graphic equipment, computer vision, convolutional filters, convolutional neural networks, Cyber-physical systems, deep neural networks, Filtering algorithms, fuzzing features, high-resolution visual sensory inputs, intelligent cyber-physical systems, intelligent cyberphysical systems, learning (artificial intelligence), modern machine learning methods, neural nets, Neural networks, object detection, physical world, traffic engineering computing, Vehicles},
	pages = {1--2},
	file = {Raj et al_2017_Work-in-progress.pdf:files/783/Raj et al_2017_Work-in-progress.pdf:application/pdf;IEEE Xplore Abstract Record:files/784/8094374.html:text/html}
}
